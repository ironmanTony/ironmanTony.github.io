<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[ironmantony]]></title>
  <subtitle><![CDATA[不要想着远处的路有多远，要知道你是在走一小步，你能办到的！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2015-10-01T16:41:25.360Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[ironman]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[RadioGroup.check()的坑]]></title>
    <link href="http://yoursite.com/2015/10/02/RadioGroup-check-%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2015/10/02/RadioGroup-check-的坑/</id>
    <published>2015-10-01T16:20:43.000Z</published>
    <updated>2015-10-01T16:41:25.360Z</updated>
    <content type="html"><![CDATA[<h3 id="问题描述：">问题描述：</h3><p>我使用RadioGroup.check()方法来初始化radioGroup，然后我在onCheckedChanged()里去根据选择的radioButton来发送网络请求，并且新建fragment。这时候我发现一个问题：这个radiobutton下的网络请求会发送两次，而且fragment也会创建两次，而且那个新建的fragment里还有很多的初始化过程和网络请求，所以会让用户一直处在等待的状态。</p>
<p>开始时候各种找原因，以为是我在哪里调用了太多次，还是共用layout文件有相同的id所以被别的地方的调用影响了？都不是，最后在stackoverflow上找到了答案：使用RadioGroup.check()会调用onCheckedChanged()方法三次，而我在onCheckedChanged()方法里判断了调用的是哪个id，然后发送请求创建fragmeng，所以只调用了两次。</p>
<h3 id="statckoverflow原文链接：">statckoverflow原文链接：</h3><p><a href="http://stackoverflow.com/questions/10263778/radiogroup-calls-oncheckchanged-three-times" target="_blank" rel="external">http://stackoverflow.com/questions/10263778/radiogroup-calls-oncheckchanged-three-times</a></p>
<p><img src="/imgs/radiogroupChecks.png" alt=""></p>
<h3 id="RadioGroup-check()源码如下：">RadioGroup.check()源码如下：</h3><p><a href="http://www.grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.1.1_r1/android/widget/RadioGroup.java#RadioGroup.check%28int%29" target="_blank" rel="external">http://www.grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.1.1_r1/android/widget/RadioGroup.java#RadioGroup.check%28int%29</a></p>
<p><img src="/imgs/radiogroup2.png" alt=""></p>
<h3 id="解决方法_：">解决方法 ：</h3><p>使用radioBotton.setChecked()方法来解决</p>
<p><img src="/imgs/radiogroup3.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="问题描述：">问题描述：</h3><p>我使用RadioGroup.check()方法来初始化radioGroup，然后我在onCheckedChanged()里去根据选择的radioButton来发送网络请求，并且新建fragment。这时候我发现一个问题：这个]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[AysncTask源码解析]]></title>
    <link href="http://yoursite.com/2015/08/06/AysncTask%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2015/08/06/AysncTask源码解析/</id>
    <published>2015-08-06T08:03:13.000Z</published>
    <updated>2015-08-06T08:41:31.667Z</updated>
    <content type="html"><![CDATA[<h2 id="AsyncTask的类图">AsyncTask的类图</h2><p><img src="/imgs/asynctask.png" alt=""></p>
<ul>
<li>其中，如果使用默认的Executor其实AsyncTask中的任务是一个一个执行的。<br>其中灰色的是接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">    Runnable mActive;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">        mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    scheduleNext();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduleNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这段代码中可以看出来。<br>如果使用Thread_pool_executor那么就会使用线程池来执行你的task。<br>注释中也有：</p>
<p>Order of execution</p>
<p>When first introduced, AsyncTasks were executed serially on a single background<br>thread. Starting with {android.os.Build.VERSION_CODES#DONUT}, this was changed<br>to a pool of threads allowing multiple tasks to operate in parallel. Starting with<br>android.os.Build.VERSION_CODES#HONEYCOMB, tasks are executed on a single<br>thread to avoid common application errors caused by parallel execution</p>
<p> If you truly want parallel execution, you can invoke<br>executeOnExecutor(java.util.concurrent.Executor, Object[])} with<br>THREAD_POOL_EXECUTOR</p>
<ul>
<li><p>从类图可以看出来AsyncTask主要使用了组合的方式来使用代码。</p>
</li>
<li><p>理解代码的一个方式是画类图，然后找一个入口然后看下去，看他是如何调用的。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="AsyncTask的类图">AsyncTask的类图</h2><p><img src="/imgs/asynctask.png" alt=""></p>
<ul>
<li>其中，如果使用默认的Executor其实AsyncTask中的任务是一个一个执行的。<br>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[gralde 循环依赖的问题]]></title>
    <link href="http://yoursite.com/2015/05/23/gralde%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/05/23/gralde 循环依赖的问题/</id>
    <published>2015-05-23T02:42:24.000Z</published>
    <updated>2015-07-27T02:32:38.901Z</updated>
    <content type="html"><![CDATA[<p>今天遇到一个问题，添加一个EventBus依赖包之后运行一直报：‘java.exe finished with non-zero exit value 2 ’</p>
<p>在statckoverflow上找到了问题的答案：</p>
<blockquote>
<p>First of all you should try to list your dependencies with gradle :MODULE:dependencies Check if there are libraries conflicts ( same library but different version ). In this case i supose you should exclude support library module from Facebook SDK.</p>
<pre><code><span class="keyword">compile</span> (<span class="string">'com.facebook.android:facebook-android-sdk:3.23.1'</span>){    
    <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'com.google.android'</span>, module: <span class="string">'support-v4'</span>    
}
</code></pre></blockquote>
<h2 id="解决方法">解决方法</h2><p>在添加EventBus的依赖的地方添加如下代码：</p>
<blockquote>
<pre><code><span class="keyword">compile</span> (<span class="string">'de.greenrobot:eventbus:2.0.1'</span>){
    <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'com.google.android'</span>, module: <span class="string">'support-v4'</span>
    <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'com.google.android'</span>, module: <span class="string">'annotations'</span>
    <span class="keyword">exclude</span> <span class="keyword">group</span>: <span class="string">'com.google.android'</span>, module: <span class="string">'android-test'</span>
}
</code></pre></blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天遇到一个问题，添加一个EventBus依赖包之后运行一直报：‘java.exe finished with non-zero exit value 2 ’</p>
<p>在statckoverflow上找到了问题的答案：</p>
<blockquote>
<p>Firs]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[listView 闪动的问题]]></title>
    <link href="http://yoursite.com/2015/05/20/listView%20%E9%97%AA%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/05/20/listView 闪动的问题/</id>
    <published>2015-05-20T02:42:24.000Z</published>
    <updated>2015-07-27T02:32:38.900Z</updated>
    <content type="html"><![CDATA[<p>我仿做一个网易新闻客户端，因为每一行有不同的内容，所以需要使用getItemViewType来区分不同的行的类型</p>
<p>然而我的东西出现了一个很奇怪的问题：</p>
<blockquote>
<p>在滑动的时候会出现一行快速的闪动（快速变换不同的内容）</p>
</blockquote>
<p>分析问题原因：</p>
<blockquote>
<p>一开始以为我是因为在viewpager里嵌套viewpager惹的祸，<br>或者是使用开源的下拉刷新框架惹的祸，<br>或者是自己使用Viewholder的姿势不对，一开始主要是怀疑getView里面的东西用的不对。</p>
</blockquote>
<p>求证过程：</p>
<blockquote>
<p>我新写一个Activity并没用用到ViewPager，而且我也将原来的adapter的GetView方法重写，由于类型比较多，所以还将变量的名字改变了怕自己哪里写错了。但是依然还是闪动。</p>
</blockquote>
<p>真实的原因：</p>
<blockquote>
<p>然后我就发现我自己的Viewholder里面的组件也是static，因为Viewholder是要复用的，所以需要为static的，但是如果把里面的元素也写成是static的就会有问题。就像上面那样的闪动的问题。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>我仿做一个网易新闻客户端，因为每一行有不同的内容，所以需要使用getItemViewType来区分不同的行的类型</p>
<p>然而我的东西出现了一个很奇怪的问题：</p>
<blockquote>
<p>在滑动的时候会出现一行快速的闪动（快速变换不同的内容）</p>
</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于git的几个问题]]></title>
    <link href="http://yoursite.com/2015/05/05/git%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/05/05/git的几个问题/</id>
    <published>2015-05-05T02:42:24.000Z</published>
    <updated>2015-07-27T02:32:38.901Z</updated>
    <content type="html"><![CDATA[<h2 id="git_merge和git_rebase区别：">git merge和git rebase区别：</h2><p>这个文件写的很清楚<br><a href="http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88" target="_blank" rel="external">http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88</a>     </p>
<h2 id="git_fetch和git_pull区别：">git fetch和git pull区别：</h2><p>其实git pull相当于：git fetch , git merge<br><a href="http://stackoverflow.com/questions/292357/what-are-the-differences-between-git-pull-and-git-fetch" target="_blank" rel="external">http://stackoverflow.com/questions/292357/what-are-the-differences-between-git-pull-and-git-fetch</a>    </p>
<h2 id="到底是应该使用git_pull_还是_git_pull_—rebase_?">到底是应该使用git pull 还是 git pull —rebase ?</h2><p>我个人赞同使用git pull —rebase,因为如果多个人开发并且经常pull的话，就会出现很多：<code>Merge branch &#39;aaa&#39; of git.xxx.xxx/xxx/xxx into aaa</code>这样的commit。<br>就像这里的讨论：<a href="https://ruby-china.org/topics/112" target="_blank" rel="external">https://ruby-china.org/topics/112</a></p>
<h2 id="我们使用的工作流【集中式工作流】：">我们使用的工作流【集中式工作流】：</h2><p><a href="http://git-scm.com/book/zh/v1/%E5%88%86%E5%B8%83%E5%BC%8F-Git-%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B" target="_blank" rel="external">http://git-scm.com/book/zh/v1/%E5%88%86%E5%B8%83%E5%BC%8F-Git-%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B</a><br>通常，集中式工作流程使用的都是单点协作模型。一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据（见图 5-1）。<br><img src="/img/workflow.png" alt="workflow.png"><br>如果两个开发者从中心仓库克隆代码下来，同时作了一些修订，那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发者在提交他的修订之前，必须先下载合并服务器上的数据，解决冲突之后才能推送数据到共享服务器上。在 Git 中这么用也决无问题，这就好比是在用 Subversion（或其他 CVCS）一样，可以很好地工作。<br>如果你的团队不是很大，或者大家都已经习惯了使用集中式工作流程，完全可以采用这种简单的模式。只需要配置好一台中心服务器，并给每个人推送数据的权限，就可以开展工作了。<strong>但如果提交代码时有冲突， Git 根本就不会让用户覆盖他人代码，它直接驳回第二个人的提交操作。这就等于告诉提交者，你所作的修订无法通过快进（fast-forward）来合并，你必须先拉取最新数据下来，手工解决冲突合并后，才能继续推送新的提交</strong>。 绝大多数人都熟悉和了解这种模式的工作方式，所以使用也非常广泛。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="git_merge和git_rebase区别：">git merge和git rebase区别：</h2><p>这个文件写的很清楚<br><a href="http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用monkey对app进行压力测试]]></title>
    <link href="http://yoursite.com/2015/05/04/%E4%BD%BF%E7%94%A8monkey%E5%AF%B9app%E8%BF%9B%E8%A1%8C%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2015/05/04/使用monkey对app进行压力测试/</id>
    <published>2015-05-04T02:42:24.000Z</published>
    <updated>2015-07-27T02:32:38.901Z</updated>
    <content type="html"><![CDATA[<p>其实monkey压力测试也不需要怎么去配置，只是有一些参数。</p>
<hr>
<ul>
<li><p>使用adb shell来连接一个模拟器或者真机。<br>直接adb shell</p>
</li>
<li><p>使用monkey -p packagename -v times 随机生成times个event来测试packagename的default界面。     </p>
<blockquote>
<p>比如：monkey -p com.tencent.mobileqq -v 5000<br>对qq来进行压力测试。</p>
</blockquote>
<p>或者monkey -p packagename —pct-touch 100 -v times。<code>-v times</code>是一定要带上的。</p>
</li>
</ul>
<hr>
<h2 id="这些命令都简单，但是我现在想要获取到qq的包名。">这些命令都简单，但是我现在想要获取到qq的包名。</h2><p>使用命令<code>pm list packages -f</code>就可以获取到设备上所有已经安装的包名。<br>这样就获取到qq的包名为：com.tencent.mobileqq<br>这样我就可以使用monkey来玩qq了。     </p>
<hr>
<p>本来想用这种方式来测试一下是否可以用monkey来抢微信红包，<br>然后我就运行了<code>monkey -p com.tencent.mm --pct-touch 100 -v 2000</code>结果加了好多好友而且还没有发送成功。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>其实monkey压力测试也不需要怎么去配置，只是有一些参数。</p>
<hr>
<ul>
<li><p>使用adb shell来连接一个模拟器或者真机。<br>直接adb shell</p>
</li>
<li><p>使用monkey -p packagename -v t]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于如何解决一个问题]]></title>
    <link href="http://yoursite.com/2015/05/01/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2015/05/01/关于如何解决一个问题/</id>
    <published>2015-05-01T02:42:24.000Z</published>
    <updated>2015-07-27T02:32:38.900Z</updated>
    <content type="html"><![CDATA[<hr>
<h2 id="一定要在搜索列表页面去筛选！包括看那些小的字。">一定要在搜索列表页面去筛选！包括看那些小的字。</h2><p>在网页列表里去筛选比进入网页内容然后发现他不是这个东西花的时间要少得多。<br>比如需要搜索windows下管理多个git ssh的问题，那么一定要注意关键字<code>多个账号</code>，无关的网页不要进，不然可能浪费大多数时间。</p>
<hr>
<h2 id="进入网页之后要学会使用查找来找到自己想要的东西。">进入网页之后要学会使用查找来找到自己想要的东西。</h2><p>可能打开的网页很长，这个时候用ctr + f 比自己的肉眼看要快很多。</p>
<hr>
<h2 id="一定要有一个自己处理这个事情的解决方案、步骤。">一定要有一个自己处理这个事情的解决方案、步骤。</h2><p>解决一个问题不是看谁会搜索，在任何想到准确的解决方案之前的搜索都是浪费时间。</p>
<hr>
<h2 id="解决一个问题一定要一针见血。请直面问题！！！">解决一个问题一定要一针见血。请直面问题！！！</h2><p>我发现我有一个毛病，解决一个问题总是喜欢围绕着问题去转。比如需要写一markdown格式的博客，然后我就找了整个markdown语法的文章来读，但是我要知道我想要做的是写博客啊，不是学习markdown语法。<br>可能这个是很轻的问题，但是有很多时候确实我围绕问题转的毛病太多，需要解决的问题是这个，但是我总是在研究一些相关的东西。<br>而不是去直面那个问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h2 id="一定要在搜索列表页面去筛选！包括看那些小的字。">一定要在搜索列表页面去筛选！包括看那些小的字。</h2><p>在网页列表里去筛选比进入网页内容然后发现他不是这个东西花的时间要少得多。<br>比如需要搜索windows下管理多个git ssh的问题，那么]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Android中使用unittest]]></title>
    <link href="http://yoursite.com/2015/04/30/Android%E4%B8%AD%E4%BD%BF%E7%94%A8UnitTest/"/>
    <id>http://yoursite.com/2015/04/30/Android中使用UnitTest/</id>
    <published>2015-04-30T02:42:24.000Z</published>
    <updated>2015-07-27T02:32:38.900Z</updated>
    <content type="html"><![CDATA[<p>在Android中使用unittest，不用再运行整个工程，只是测试某一些类是否正确运行。</p>
<hr>
<h2 id="步骤：">步骤：</h2><ol>
<li>设置Android studio，</li>
</ol>
<blockquote>
<p>Enable the unit testing feature in Settings &gt; Gradle &gt; Experimental.<br><img src="http://7xiu5y.com1.z0.glb.clouddn.com/blog_setting.png" alt="">    </p>
</blockquote>
<hr>
<ol>
<li>在Android studio左下角，有一个Build Variantes, 最上方选择Unit Tests.</li>
</ol>
<p><img src="http://7xiu5y.com1.z0.glb.clouddn.com/blog_build.png" alt=""><br>选择Unit Tests<br><img src="http://7xiu5y.com1.z0.glb.clouddn.com/blog_choose_artifact.png" alt="">    </p>
<hr>
<ol>
<li>愉快的写test就可以了   </li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android中使用unittest，不用再运行整个工程，只是测试某一些类是否正确运行。</p>
<hr>
<h2 id="步骤：">步骤：</h2><ol>
<li>设置Android studio，</li>
</ol>
<blockquote>
<p>Enable ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[行为型模式]]></title>
    <link href="http://yoursite.com/2014/03/20/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2014/03/20/行为型模式/</id>
    <published>2014-03-20T04:44:43.000Z</published>
    <updated>2015-07-27T02:55:57.265Z</updated>
    <content type="html"><![CDATA[<h2 id="策略模式（Strategy_Pattern)">策略模式（Strategy Pattern)</h2><ol>
<li><code>实现原理</code>：其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替</li>
<li><code>优点</code>：将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响到客户端的情况下发生变化。<br><img src="/imgs/clms.png" alt=""></li>
</ol>
<hr>
<h2 id="迭代器模式（Iterator_Pattern)">迭代器模式（Iterator Pattern)</h2><ol>
<li><code>实现原理</code>：提供一种方法访问一个容器（container）对象中的各个元素，而又不暴露该对象的内部细节。</li>
<li><code>优点</code>：它可以让使用者透过特定的接口巡访容器中的每一个元素而不用了解底层的实现。<br><img src="/imgs/ddqms.png" alt=""></li>
</ol>
<hr>
<h2 id="模板方法模式（Template_Method_Pattern)">模板方法模式（Template Method Pattern)</h2><ol>
<li><code>实现原理</code>：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。这里的算法的结构，可以理解为你根据需求设计出来的业务流程。特定的步骤就是指那些可能在内容上存在变数的环节。</li>
<li><code>优点</code>：模板方法模式也是为了巧妙解决变化对系统带来的影响而设计的。使用模板方法使系统扩展性增强，最小化了变化对系统的影响。<br><img src="/imgs/mbffms.jpg" alt=""></li>
</ol>
<hr>
<h2 id="中介者模式（Mediator_Pattern)">中介者模式（Mediator Pattern)</h2><ol>
<li><code>实现原理</code>：用一个中介者对象来封装一系列的对象交互。中介者使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立的改变他们之间的交互。</li>
<li><code>优点</code>：它将各Colleague解耦。Mediator有利于各Colleague间的松耦合，你可以独立的改变和复用各Colleague类和Mediator类。 它简化了对象协议用Mediator和各Colleague间的一对多的交互来代替多对多的交互。一对多的关系更易于理解、维护和扩展。<br><img src="/imgs/zjzms.png" alt=""></li>
</ol>
<hr>
<h2 id="访问者模式（Visitor_Pattern)">访问者模式（Visitor Pattern)</h2><ol>
<li><code>实现原理</code>：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。（gof）<br>每一个元素实现visitable接口的accept方法接受一个visitor的实例对象，并且使用这个实例对象的visit方法来把自己的引用传递过去，<br><img src="/imgs/fwz1.png" alt=""><br>而真正调用时在concreteVisitor里面<br><img src="/imgs/fwz2.png" alt=""></li>
<li><code>优点</code>：<br><img src="/imgs/fwzms.png" alt="类图"></li>
</ol>
<hr>
<h2 id="职责链模式（Chain_of_Responsibility)">职责链模式（Chain of Responsibility)</h2><ol>
<li><code>实现原理</code>：通过给一个以上对象处理请求的机会来避免请求的发送者和接收者的耦合。链接接收对象并在链中传递请求直到有对象处理它。<br><img src="/imgs/zzlms.png" alt=""><br>我的理解：在每一个concreteHandler里面加入另外一个concreteHandler的对象的引用，从而实现处理的传递。</li>
<li><code>优点</code>：避免请求的发送者和接收者之间的耦合关系。</li>
</ol>
<hr>
<h2 id="状态模式（State_Pattern)">状态模式（State Pattern)</h2><ol>
<li><code>实现原理</code>：状态模式的意图是，允许一个对象在其内部状改变时改变它的行为。看起来就像是改变了它的类一样<br><img src="/imgs/ztms.png" alt=""><br>个人理解：这个跟职责链模式有很大的相似之处，职责链模式是他的处理的对象是排成一个链子，并且对象必须要把这个链子走完；但是状态模式的下一个引用就可能没有排成一个链子状，而且很多时候也不需要走完所有的状态，他指示把if else变成类之间的转换。</li>
<li><code>优点</code>：主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同的一系列类当中，可以把复杂的逻辑判断简单化。</li>
</ol>
<hr>
<h2 id="解释器模式（Interpreter_Pattern)">解释器模式（Interpreter Pattern)</h2><ol>
<li><code>实现原理</code>：定义语言的文法，并且建立一个解释器来解释该语言中的句子。它属于类的行为模式。这里的语言意思是使用规定格式和语法的代码。<br><img src="/imgs/jsqms.png" alt=""><ul>
<li>抽象表达式角色(AbstractExpression): 声明一个抽象的解释操作,这个接口为所有具体表达式角色都要实现的.</li>
<li>终结符表达式角色(TerminalExpression): 实现与文法中的元素相关联的解释操作,通常一个解释器模式中只有一个终结符表达式,但有多个实例对应不同的终结符.<br>终结符就是语言中用到的基本元素,一般不能再被分解,如: x -&gt; xa, 这里a是终结符，因为没有别的规则可以把a变成别的符号，不过x可以变成别的符号，所以x是非终结符.</li>
<li>非终结符表达式角色(NonterminalExpression): 文法中的每条规则对应于一个非终结表达式, 非终结表达式根据逻辑的复杂程度而增加,原则上每个文法规则都对应一个非终结符表达式.</li>
<li>环境角色(Context): 包含解释器之外的一些全局信息.</li>
</ul>
</li>
<li><code>应用环境</code>：<br>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。而且当文法简单、效率不是关键问题的时候效果最好。</li>
</ol>
<hr>
<h2 id="观察者模式（Observer_Pattern）">观察者模式（Observer Pattern）</h2><ol>
<li><code>实现原理</code>：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。也可以只通知部分。（gof）<br><img src="/imgs/gczms.png" alt=""><ul>
<li><code>抽象主题(Subject)角色</code>：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色.</li>
<li><code>具体主题(ConcreteSubject)角色</code>：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色.</li>
<li><code>抽象观察者(Observer)角色</code>：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口.</li>
<li><code>具体观察者(ConcreteObserver)角色</code>：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用.<br>在观察者模式中，又分为<code>推模型</code>和<code>拉模型</code>两种方式。</li>
<li>推模型:主题对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据.</li>
<li>拉模型:主题对象在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到主题对象中获取，相当于是观察者从主题对象中拉数据。一般这种模型的实现中，会把主题对象自身通过update()方法传递给观察者，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</li>
</ul>
</li>
<li><code>优点</code>：观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</li>
</ol>
<hr>
<h2 id="命令模式（Command_Pattern)">命令模式（Command Pattern)</h2><ol>
<li><code>实现原理</code>：<br><img src="/imgs/mlms.png" alt=""><br>命令模式涉及到五个角色，它们分别是：<ul>
<li>客户端(Client)角色：创建一个具体命令(ConcreteCommand)对象并确定其接收者。</li>
<li>命令(Command)角色：声明了一个给所有具体命令类的抽象接口。</li>
<li>具体命令(ConcreteCommand)角色：定义一个接收者和行为之间的弱耦合；实现execute()方法，负责调用接收者的相应操作。execute()方法通常叫做执行方法。</li>
<li>请求者(Invoker)角色：负责调用命令对象执行请求，相关的方法叫做行动方法。</li>
<li>接收者(Receiver)角色：负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法。</li>
</ul>
</li>
<li><code>优点</code>：用于“行为请求者”与“行为实现者”解耦，可实现二者之间的松耦合，以便适应变化。分离变化与不变的因素。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="策略模式（Strategy_Pattern)">策略模式（Strategy Pattern)</h2><ol>
<li><code>实现原理</code>：其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替</li>
<li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[结构型模式]]></title>
    <link href="http://yoursite.com/2014/03/20/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2014/03/20/结构型模式/</id>
    <published>2014-03-20T03:44:42.000Z</published>
    <updated>2015-08-03T08:21:20.614Z</updated>
    <content type="html"><![CDATA[<hr>
<h2 id="适配器模式（Adapter_Pattern)：">适配器模式（Adapter Pattern)：</h2><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。    </p>
<p>适配器模式有<code>类适配器</code>和<code>对象适配器</code>两种不同的类型：    </p>
<ul>
<li><p>类适配器：通过继承的方式来调用已有的接口来实现转换接口。<br><img src="/imgs/lspq.png" alt=""></p>
</li>
<li><p>对象适配器：通过对象引用的方式来调用已有的接口来实现接口的转换<br><img src="/imgs/dxspq.png" alt=""></p>
</li>
</ul>
<hr>
<h2 id="门面模式（Facade_Pattern)：">门面模式（Facade Pattern)：</h2><ol>
<li><code>实现原理：</code>它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用。也就是将众多的子接口或者子模    块包装一下，让客户更方便地调用。</li>
<li><p><code>优点：</code></p>
<ul>
<li>松散耦合：门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</li>
<li>简单易用：门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了.</li>
<li><p>更好的划分访问层次：通过合理使用Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。<br><img src="/imgs/mmms.png" alt=""></p>
</li>
<li><p>Facade:这个外观类为子系统中Packages 1、2、3提供一个共同的对外接口</p>
</li>
<li>Clients:客户对象通过一个外观接口读写子系统中各接口的数据资源。</li>
<li>Packages:客户可以通过外观接口读取的内部库。</li>
</ul>
</li>
</ol>
<p>描述门面模式的例子：<br><img src="/imgs/mmmslz.png" alt=""></p>
<hr>
<h2 id="代理模式（Proxy_pattern)：">代理模式（Proxy pattern)：</h2><ol>
<li><code>实现原理：</code>为其他对象提供一种代理以控制对这个对象的访问。</li>
<li><code>优点：</code>可以在实际调用的对象和客户端之间添加一些额外的操作。</li>
</ol>
<p>分为<code>静态代理</code>和<code>动态代理</code>：</p>
<ul>
<li>静态代理：<blockquote>
<p><img src="/imgs/jtdl.png" alt=""></p>
</blockquote>
</li>
<li>动态代理：</li>
</ul>
<hr>
<h2 id="合成模式（Composite_Pattern)：">合成模式（Composite Pattern)：</h2><ol>
<li><code>实现原理：</code>合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式可以使客户端将单纯元素与复合元素同等看待。合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式可以使客户端将单纯元素与复合元素同等看待。</li>
<li><code>优点：</code>合成模式使得客户端把一个个单独的成分对象和由它们复合而成的合成对象同等看待。<br><img src="/imgs/hcms.png" alt=""></li>
</ol>
<hr>
<h2 id="享元模式（Flyweight_Pattern)：">享元模式（Flyweight Pattern)：</h2><ol>
<li><code>实现原理</code>：<br><img src="/imgs/xyms.png" alt=""></li>
<li><code>优点</code>：享元模式以共享的方式高效地支持大量的细粒度对象。它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。</li>
</ol>
<hr>
<h2 id="装饰着模式（Decorator_Pattern)：">装饰着模式（Decorator Pattern)：</h2><ol>
<li><code>实现原理</code>：是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。</li>
<li><code>优点</code>：就功能而言，修饰模式相比生成子类更为灵活，这样可以给某个对象而不是整个类添加一些功能。<br><img src="/imgs/zsz.jpg" alt=""></li>
</ol>
<hr>
<p>7.桥模式（Bridge Pattern)：</p>
<ol>
<li><code>实现原理</code>：桥模式就是把抽象部分和它的实现部分分离开来，让两者可独立变化。(或者说：把事物对象和其具体行为、具体特征分离开来，使它们可以各自独立的变化。事物对象仅是一个抽象的概念。如“圆形”、“三角形”归于抽象的“形状”之下，而“画圆”、“画三角”归于实现行为的“画图”类之下，然后由“形状”调用“画图”)<br><img src="/imgs/qjms.jpg" alt=""><br>组成：<ul>
<li>抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。</li>
<li>修正抽象化(Refined Abstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。</li>
<li>实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。必须指出的是，这个接口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。</li>
<li>具体实现化(Concrete Implementor)角色：这个角色给出实现接口的具体实现。</li>
</ul>
</li>
<li>优点：桥模式就是把抽象部分和它的实现部分分离开来，让两者可独立变化。分离就把实现部分从它要实现的抽象部分独立出来，自我封装成对象。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h2 id="适配器模式（Adapter_Pattern)：">适配器模式（Adapter Pattern)：</h2><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。    </p>
<p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[建造型设计模式]]></title>
    <link href="http://yoursite.com/2014/03/20/%E5%BB%BA%E9%80%A0%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2014/03/20/建造型设计模式/</id>
    <published>2014-03-20T02:44:41.000Z</published>
    <updated>2015-07-27T02:55:58.396Z</updated>
    <content type="html"><![CDATA[<hr>
<h2 id="简单工厂：">简单工厂：</h2><p>它的实质是由一个工厂类根据传入的参 数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。将所有的类的创建放到一个类中。</p>
<hr>
<h2 id="工厂方法：">工厂方法：</h2><p>工厂方法模式是为了克服简单工厂模式的缺点（主要是为了满足OCP）而设计出来的。简单工厂模式的工厂类随着产品类的增加需要增加很多方法 （或代码），而工厂方法模式每个具体工厂类只完成单一任务，代码简洁。工厂方法模式完全满足OCP，即它有非常良好的扩展性。<br><img src="/imgs/dsign_pattern1_1.png" alt=""></p>
<hr>
<h2 id="抽象工厂：">抽象工厂：</h2><p>克服工厂方法增长速度太快的弊端。将同类产品抽象成一个工厂，从而减少工厂类的数量。<br><img src="/imgs/cxgc.jpg" alt=""></p>
<hr>
<h2 id="单例模式：">单例模式：</h2><p>可以使创建的对象只有一个，从而实现线程安全或保证数据单一。但是实现线程安全的单例需要在创建对象的时候加上synchronized代码块。</p>
<hr>
<h2 id="原型模式：">原型模式：</h2><p>原型模式被用在频繁调用且极其相似的对象上。原型模式会克隆对象并设置改变后的属性。原型模式消耗的资源较少。<br><img src="/imgs/yxms.png" alt=""></p>
<hr>
<h2 id="创建者模式：">创建者模式：</h2><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。为何使用建造者模式是为了将构建复杂对象的过程和它的部件解耦。注意：是解耦过程和部件。<br>因为一个复杂的对象，不但有很多大量组成部分，如汽车，有很多部件：车轮、方向盘、发动机，还有各种小零件等等，部件很多，但远不止这些，如何将这些部件装配成一辆汽车，这个装配过程也很复杂(需要很好的组装技术)，Builder模式就是为了将部件和组装过程分开。<br><img src="/imgs/cjz.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h2 id="简单工厂：">简单工厂：</h2><p>它的实质是由一个工厂类根据传入的参 数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。将所有的类的创建放到一个类中。</p>
<hr>
<h2 id="工厂方法：">工厂方法：</h2><p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[design_pattern]]></title>
    <link href="http://yoursite.com/2014/03/20/design-pattern/"/>
    <id>http://yoursite.com/2014/03/20/design-pattern/</id>
    <published>2014-03-20T01:44:40.000Z</published>
    <updated>2015-07-27T02:44:47.906Z</updated>
    <content type="html"><![CDATA[<h1 id="设计模式的总结">设计模式的总结</h1><hr>
<h2 id="设计模式的分类：">设计模式的分类：</h2><ul>
<li><h2 id="建造型设计模式(Creational_Patterns)"><a href="../建造型设计模式">建造型设计模式(Creational Patterns)</a></h2><ol>
<li>工厂方法模式(Factory Method)</li>
<li>抽象工厂模式(Abstract Factory)</li>
<li>单例模式(Singleton)</li>
<li>原型模式(prototype)</li>
<li>建造者模式(Builder)</li>
</ol>
</li>
</ul>
<ul>
<li><h2 id="结构型模式(Structural_Patterns)"><a href="../结构型模式">结构型模式(Structural Patterns)</a></h2><ol>
<li>适配器模式（Adapter Pattern)</li>
<li>门面模式（Facade Pattern)</li>
<li>代理模式（Proxy pattern)</li>
<li>合成模式（Composite Pattern)</li>
<li>享元模式（Flyweight Pattern)</li>
<li>装饰着模式（Decorator Pattern)</li>
<li>桥模式（Bridge Pattern)</li>
</ol>
</li>
</ul>
<ul>
<li><h2 id="行为型模式（Behavioral_Patterns)"><a href="../行为型模式">行为型模式（Behavioral Patterns)</a></h2><ol>
<li>策略模式（Strategy Pattern)</li>
<li>迭代器模式（Iterator Pattern)</li>
<li>模板方法模式（Template Method Pattern)</li>
<li>中介者模式（Mediator Pattern)</li>
<li>访问者模式（Visitor Pattern)</li>
<li>职责链模式（Chain of Responsibility)</li>
<li>状态模式（State Pattern)</li>
<li>解释器模式（Interpreter Pattern)</li>
<li>观察者模式（Observer Pattern)</li>
<li>命令模式（Command Pattern)</li>
<li>备忘录模式（Memento Pattern)</li>
</ol>
</li>
</ul>
<p><img src="/imgs/design_pattern1.jpg" alt="design pattern "></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="设计模式的总结">设计模式的总结</h1><hr>
<h2 id="设计模式的分类：">设计模式的分类：</h2><ul>
<li><h2 id="建造型设计模式(Creational_Patterns)"><a href="../建造型设计模式">建造型设计模式]]>
    </summary>
    
  </entry>
  
</feed>